一、使用方法：
1）来看bootstrapvalidator的描述：A jQuery form validator for Bootstrap 3。从描述中我们就可以知道它至少需要jQuery、bootstrap的支持。我们首先引入需要的js组件
	　	<script src="~/Scripts/jquery-1.10.2.js"></script>
	
	    <script src="~/Content/bootstrap/js/bootstrap.min.js"></script>
	    <link href="~/Content/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
	
	    <script src="~/Content/bootstrapValidator/js/bootstrapValidator.min.js"></script>
	    <link href="~/Content/bootstrapValidator/css/bootstrapValidator.min.css" rel="stylesheet" />

2）我们知道，既然是表单验证，那么我们在cshtml页面就必须要有一个Form，并且我们知道Form里面取元素都是通过name属性去取值的，所以，表单里面的元素都要有一个name的属性值。
		<form>
            <div class="form-group">
                <label>Username</label>
                <input type="text" class="form-control" name="username" />
            </div>
            <div class="form-group">
                <label>Email address</label>
                <input type="text" class="form-control" name="email" />
            </div>
            <div class="form-group">
                <button type="submit" name="submit" class="btn btn-primary">Submit</button>
            </div>
        </form>
        
 3）有了表单元素之后，就是我们的js初始化了
$(function () {
        $('form').bootstrapValidator({
            message: 'This value is not valid',
            feedbackIcons: {
                valid: 'glyphicon glyphicon-ok',
                invalid: 'glyphicon glyphicon-remove',
                validating: 'glyphicon glyphicon-refresh'
            },
            fields: {
                username: {
                    message: '用户名验证失败',
                    validators: {
                        notEmpty: {
                            message: '用户名不能为空'
                        },
                        stringLength: {
                            min: 6,
                            max: 18,
                            message: '用户名长度必须在6到18位之间'
                        },
                        regexp: {
                            regexp: /^[a-zA-Z0-9_]+$/,
                            message: '用户名只能包含大写、小写、数字和下划线'
                        }
                    }
                },
                email: {
                    validators: {
                        notEmpty: {
                            message: '邮箱不能为空'
                        },
                        emailAddress: {
                            message: '邮箱地址格式有误'
                        }
                    }
                }
            }
        });
    });      



二、常用验证规则
由上面的代码可以看出在validators属性对应一个Json对象，里面可以包含多个验证的类型：
		notEmpty：非空验证；
		stringLength：字符串长度验证；
		regexp：正则表达式验证；
		emailAddress：邮箱地址验证（都不用我们去写邮箱的正则了~~）
		
		
		除此之外，在文档里面我们看到它总共有46个验证类型，我们抽几个常见的出来看看：
		base64：64位编码验证；
		between：验证输入值必须在某一个范围值以内，比如大于10小于100；
		creditCard：身份证验证；
		date：日期验证；
		ip：IP地址验证；
		numeric：数值验证；
		phone：电话号码验证；
		uri：url验证；
		remote：remote远程服务器数据验证；











