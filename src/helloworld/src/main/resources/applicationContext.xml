<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-4.0.xsd
               http://www.springframework.org/schema/tx
               http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
               http://www.springframework.org/schema/task
               http://www.springframework.org/schema/task/spring-task-4.0.xsd
               ">

	<!-- 测试bean -->
	<bean id="helloWorld" class="com.duan.test.service.HelloWorldImpl"></bean>

	<!--使Spring支持自动检测组件，
	   1、@Service用于标注业务层组件 
       2、@Controller用于标注控制层组件(如struts中的action) 
       3、@Repository用于标注数据访问组件，即DAO组件. 
       4、@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。
      -->	
	<context:annotation-config />
	<context:component-scan base-package="com.duan.dao"></context:component-scan>
	<context:component-scan base-package="com.duan.service"></context:component-scan>
	
	<!-- 配置是我们的task任务扫描注解 -->
	<task:annotation-driven/>
 	<context:component-scan base-package="com.duan.schedule"></context:component-scan>


	<!-- 定义配置文件位置 -->
	<bean id="propertyConfigurer"  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="location" value="classpath:jdbc.properties"/> 
	</bean>    

 	<!-- 定义带连接池的数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"  destroy-method="close">
		  <property name="driverClassName"><value>${jdbc.driver}</value></property> 
		  <property name="url"><value>${jdbc.url}</value></property>
		  <property name="username"><value>${jdbc.username}</value></property> 
		  <property name="password"><value>${jdbc.password}</value></property>

		  <!-- 连接初始值，连接池启动时创建的连接数量的初始值  默认值是0 -->  
		  <property name="initialSize" value="3" />  
		  <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请  默认值是0 -->  
		  <property name="minIdle" value="3" />  
    	  <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 ，0时无限制  默认值是8 -->  
		  <property name="maxIdle" value="5" />  
		  <!-- 连接池的最大值，同一时间可以从池分配的最多连接数量，0时无限制   默认值是8 -->  
		  <property name="maxTotal" value="15" /> 
		  
	</bean>


    <!-- 引入Hibernate的支持和配置内容 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" lazy-init="false">
        <!-- 注入datasource，给sessionfactoryBean内setdatasource提供数据源 -->
        <property name="dataSource" ref="dataSource" />
       <!-- hibernate 配置文件的路径 -->  
       <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
       <property name="packagesToScan" >
            <list>
            	<!-- 普通业务po -->
                <value>com.duan.bean</value>
                <!-- 系统po-->
                <value>com.duan.common.bean</value>
            </list>
        </property>
    </bean>

	<!-- db工具类，进行数据源管理 -->
	<bean id="dBUtils" class="com.duan.common.tool.DBUtils">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- aop工具类，进行切面编程 -->
	<bean id="aopUtil" class="com.duan.aop.AopUtil"></bean>
	
    <!-- 定义事务管理 -->
    <bean id="transactionManager"  class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>	

    <tx:advice id="txAdvice"  transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 事务执行方式
                REQUIRED：指定当前方法必需在事务环境中运行，
                如果当前有事务环境就加入当前正在执行的事务环境，
                如果当前没有事务，就新建一个事务。
                这是默认值。 
             -->
             <tx:method name="save*" propagation="REQUIRED" />
             
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="import*" propagation="REQUIRED" />
            <!-- 
                指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。 
                查询定义即可
                read-only="true"  表示只读
             -->
            <tx:method name="*"  propagation="NOT_SUPPORTED" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 定义切面，在 * tdxy.*.service.*ServiceImpl.*(..) 中执行有关的hibernate session的事务操作
		    |第一个 * —— 通配 随便率性返回值类型| 
			|第二个 * —— 通配包com.evan.crm.service下的随便率性class| 
			|第三个 * —— 通配包com.evan.crm.service下的随便率性class的随便率性办法| 
			|第四个 .. —— 通配 办法可以有0个或多个参数
     -->
    <aop:config expose-proxy="true">
        <aop:pointcut id="serviceOperation"  expression="execution(* com.duan.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice"    pointcut-ref="serviceOperation"  order="1"/>
        <aop:aspect	id="duanAspect" ref="aopUtil" order="2">
        	<aop:before method="aopBegin" pointcut-ref="serviceOperation"/>
        	<aop:after method="aopEnd" pointcut-ref="serviceOperation"/>
        </aop:aspect>        
    </aop:config>

</beans>